local Input = require("nui.input")
local Job = require("plenary.job")
local Popup = require("nui.popup")

-- Define the plugin namespace
local Testing = {}

-- Define a function to get the module path
local function get_module_path()
  -- Determine the module path based on your project's structure
  local module_path = "kroucher.testing"
  return module_path
end

function Testing:create_input(title, on_submit)
  local input = Input({
    border = {
      style = "rounded",
      text = {
        top = title,
        top_align = "center",
      },
    },
    relative = "editor",
    position = "50%",
    size = {
      width = 40,
      height = 2,
    },
  }, {
    prompt = "> ",
    default_value = "",
    on_submit = on_submit,
  })

  return input
end

function Testing:create_window(title, hint)
  local popup = Popup({
    zindex = 10,
    border = {
      padding = { 1, 1, 1, 1 }, -- optional
      style = "rounded",
      text = { top = title, top_align = "center", bottom = hint, bottom_align = "center" },
    },
    relative = "editor",
    position = "50%",
    size = {
      width = "70%",
      height = "70%",
    },
    enter = true,
    focusable = true,
    buf_options = {
      modifiable = true,
      readonly = false,
    },
  })

  popup:mount()

  return popup
end

function Testing:create_keybinds_window(title)
  local popup = Popup({
    border = {
      padding = { 1, 1, 1, 1 }, -- optional
      style = "rounded",
      text = { top = title, top_align = "center" },
    },
    relative = "editor",
    position = {
      row = "80%",
      col = "0%",
    },
    size = {
      width = "30%",
      height = "20%",
    },
    enter = true,
    focusable = true,
    buf_options = {
      modifiable = true,
      readonly = false,
    },
  })

  popup:mount()

  return popup
end

-- Define the completion function
function _G:graphite_complete(arg_lead)
  -- Define a table of completion candidates
  local candidates = {
    "log_short",
    "branch_create",
    "commit_create",
    "commit_amend",
    "status",
    "restore",
    "repo_sync",
    "stack_submit",
    "downstack_get",
    "branch_checkout",
    "branch_up",
    "branch_down",
    "branch_bottom",
    "branch_top",
    "repo_init",
  }

  -- Filter the candidates based on the argument lead
  local matches = {}
  for _, candidate in ipairs(candidates) do
    if string.match(candidate, "^" .. arg_lead) then
      table.insert(matches, candidate)
    end
  end

  return matches
end

-- Define the Testing command with autocompletion
vim.cmd(
  'command! -nargs=* -complete=customlist,v:lua.graphite_complete Testing lua require("'
    .. get_module_path()
    .. '").graphite_command(<f-args>)'
)

-- Define a function to handle the Testing command
function Testing:graphite_command(arg)
  if arg == nil then
    -- If no argument is passed, open the Testing dashboard
    Testing:launch_dashboard()
  else
    -- If an argument is passed, run the corresponding Testing command
    local command = "gt_" .. arg
    if Testing[command] then
      Testing[command]()
    else
      print("Unknown command: " .. arg)
    end
  end
end

function Testing:launch_dashboard()
  -- Create a new window for the buffer
  local dashboard = Testing:create_window(
    "Testing Dashboard",
    "Hint: [b]ranch | [C]hangelog | [d]ownstack | [l]og | [s]tatus | [u]pstack | [q]uit"
  )

  -- Get the currently checked out branch
  local current_branch_job = Job:new({
    command = "git",
    args = { "rev-parse", "--abbrev-ref", "HEAD" },
    on_exit = function(j)
      local output = j:result()
      vim.schedule(function()
        -- Set the buffer's lines to the keybind hints
        vim.api.nvim_buf_set_lines(dashboard.bufnr, 0, -1, false, {
          "Currently checked out branch: " .. output[1],
        })
      end)
    end,
  })

  current_branch_job:start()

  -- Get the recently checked out branches
  local recent_branches_job = Job:new({
    command = "git",
    args = { "for-each-ref", "--sort=-committerdate", "--format=%(refname:short)", "refs/heads/" },
    on_exit = function(j)
      local output = j:result()
      vim.schedule(function()
        -- Parse the output to extract the branch names
        local branches = {}
        for _, branch in ipairs(output) do
          if branch then
            table.insert(branches, branch)
          end
        end

        -- Add the recently checked out branches to the buffer's lines
        vim.api.nvim_buf_set_lines(dashboard.bufnr, -1, -1, false, {
          "Recently checked out branches:",
        })
        vim.api.nvim_buf_set_lines(dashboard.bufnr, -1, -1, false, branches)
      end)
    end,
  })

  recent_branches_job:start()

  -- Key mappings
  dashboard:map("n", "b", ":lua require('kroucher.testing').open_branch_keybinds_window()<CR>")
  dashboard:map("n", "C", ":lua require('kroucher.testing'):gt_changelog()<CR>")
  dashboard:map("n", "l", ":lua require('kroucher.testing').open_log_keybinds_window()<CR>")
  dashboard:map("n", "s", ":lua require('kroucher.testing'):gt_status()<CR>")
  dashboard:map("n", "u", ":lua require('kroucher.testing'):open_upstack_keybinds_window()<CR>")
  dashboard:map("n", "q", function()
    Testing:close_dashboard_window()
  end)
  dashboard:map("n", "d", ":lua require('kroucher.testing').open_downstack_keybinds_window()<CR>")
end

-- Define a function to close the dashboard window
function Testing.close_dashboard_window()
  -- Check if the current window is the last window
  local is_last_window = vim.fn.tabpagenr("$") == 1 and vim.fn.winnr("$") == 1

  -- Close the window if it's not the last window, otherwise close the tab
  if not is_last_window then
    vim.api.nvim_win_close(0, false)
  else
    vim.cmd("tabclose")
  end
end

function Testing:gt_upstack_onto()
  local job = Job:new({
    command = "gt",
    args = Testing.commands.log_short,
    on_exit = function(j)
      local output = j:result()
      vim.schedule(function()
        -- Parse the output to extract the branch names
        local branches = {}
        local current_branch
        for _, line in ipairs(output) do
          local branch = line:match("[◯│◉─┘%s]+(.*)")
          if branch and #branch > 0 then
            -- Check if the branch is currently checked out
            if line:match("◉") then
              current_branch = branch
            else
              -- Add the line to the branches table
              table.insert(branches, line)
            end
          end
        end

        -- Create a new buffer
        local buf = Testing:create_window(
          "upstack onto",
          "Use the arrow keys to navigate, press Enter to select a branch, and press q to close this window."
        )

        -- Set the buffer's lines to the branch names
        vim.api.nvim_buf_set_lines(buf.bufnr, 0, -1, false, branches)

        -- Key mappings
        buf:map(
          "n",
          "q",
          ":lua vim.api.nvim_win_close(0, false); vim.api.nvim_set_current_win("
            .. tostring(self.dashboard_win)
            .. ")<CR>"
        )
        buf:map(
          "n",
          "<CR>",
          ":lua require('kroucher.testing'):upstack_onto_selected_branch('" .. current_branch .. "')<CR>"
        )
      end)
    end,
  })

  job:start()
end

function Testing:upstack_onto_selected_branch(current_branch)
  -- Get the current line in the buffer
  local line = vim.api.nvim_get_current_line()

  -- Extract the branch name from the line
  local branch = line:match("[◯│◉─┘%s]+(.*)")

  -- Check if the selected branch is the current branch
  if branch == current_branch then
    print("Cannot upstack onto the current branch.")
    return
  end

  -- -- Run the gt upstack onto command with the branch name and capture its output and exit code
  -- local output = vim.fn.system("gt upstack onto " .. branch)
  local output = vim.fn.system(Testing.commands.upstack_onto .. " " .. branch)
  local exit_code = vim.v.shell_error

  -- Check the exit code
  if exit_code == 0 then
    -- The command succeeded, print a message to the console
    print("Ran upstack onto on branch: " .. branch)
  else
    -- The command failed, print an error message to the console
    print("Error running upstack onto on branch: " .. branch)
    print("Output: " .. output)
  end

  -- Close the window
  vim.api.nvim_win_close(Testing.upstack_hint_win, true)
  vim.api.nvim_win_close(0, true)

  -- Set the focus back to the dashboard window
  vim.api.nvim_set_current_win(self.dashboard_win)

  -- Set the buffer options for the dashboard
  local buf = vim.api.nvim_win_get_buf(self.dashboard_win)
  vim.api.nvim_buf_set_option(buf, "modifiable", false)
  vim.api.nvim_buf_set_option(buf, "bufhidden", "hide")
end

-- Return the plugin namespace
return Testing
